Option Explicit

' A dictionary of active requests so we can map them back to the correct cell
Dim activeRequests As Object

Sub RunLLAMA_Async_OnSelection()
    Dim sel As Range, c As Range, tgt As Range, url As String, data As String
    Dim http As Object
    
    If TypeName(Selection) <> "Range" Then
        MsgBox "Select one or two columns of prompts.", vbExclamation
        Exit Sub
    End If
    Set sel = Selection
    
    Dim useTwoCols As Boolean
    If sel.Columns.Count = 1 Then
        useTwoCols = False                 ' results go to the column to the right
    ElseIf sel.Columns.Count = 2 Then
        useTwoCols = True                  ' left = prompts, right = results
    Else
        MsgBox "Select either one column (results to the right) OR two columns (left=prompt, right=result).", vbExclamation
        Exit Sub
    End If
    
    ' Init dictionary
    Set activeRequests = CreateObject("Scripting.Dictionary")
    
    url = "http://127.0.0.1:8080/v1/chat/completions"
    
    ' Fire off an async request for each prompt
    For Each c In sel.Columns(1).Cells
        If Trim$(CStr(c.Value)) <> "" Then
            If useTwoCols Then
                Set tgt = c.Offset(0, sel.Columns.Count - 1)  ' second column
            Else
                Set tgt = c.Offset(0, 1)                      ' next column to the right
            End If
            
            tgt.Value = "Computing..."
            
            data = "{""model"":""local-model"",""messages"":[{""role"":""user"",""content"":""" & JsonEscape(c.Value) & """}]}"
            
            Set http = CreateObject("MSXML2.XMLHTTP.6.0")
            http.Open "POST", url, True   ' True = async
            http.setRequestHeader "Content-Type", "application/json"
            
            ' Store cell reference in dictionary so callback knows where to write
            activeRequests(http) = tgt.Address(False, False)
            
            ' Hook callback
            Set http.onreadystatechange = GetRef("LLAMA_ResponseHandler")
            http.Send data
        End If
    Next c
End Sub

' Async callback: runs whenever a request changes state
Sub LLAMA_ResponseHandler()
    Dim http As Object, addr As String, tgt As Range, result As String
    
    Set http = Nothing
    On Error Resume Next
    Set http = GetEventSource()   ' VBA doesnâ€™t natively expose this, but MSXML calls back with http object
    On Error GoTo 0
    
    If http Is Nothing Then Exit Sub
    
    If http.readyState = 4 Then
        addr = activeRequests(http)
        If Len(addr) > 0 Then
            Set tgt = Range(addr)
            
            If http.Status = 200 Then
                result = ExtractContent(http.responseText)
                If Len(result) = 0 Then result = "200 OK but no content"
                tgt.Value = result
            Else
                tgt.Value = "HTTP " & http.Status & " " & http.statusText
            End If
            
            activeRequests.Remove http
        End If
    End If
End Sub

' Extract message.content
Private Function ExtractContent(json As String) As String
    Dim p As Long, q As Long, esc As Boolean, ch As String
    
    p = InStr(1, json, """content"":""", vbTextCompare)
    If p = 0 Then Exit Function
    p = p + Len("""content"":""")
    q = p
    esc = False
    
    Do While q <= Len(json)
        ch = Mid$(json, q, 1)
        If ch = "\" And Not esc Then
            esc = True
        ElseIf ch = """" And Not esc Then
            Exit Do
        Else
            esc = False
        End If
        q = q + 1
    Loop
    
    Dim raw As String
    raw = Mid$(json, p, q - p)
    raw = Replace(raw, "\n", vbLf)
    raw = Replace(raw, "\""","""")
    ExtractContent = raw
End Function

' Escape prompt safely
Private Function JsonEscape(text As String) As String
    Dim s As String
    s = text
    s = Replace(s, "\", "\\")
    s = Replace(s, """", "\""")
    s = Replace(s, vbCrLf, "\n")
    s = Replace(s, vbCr, "\n")
    s = Replace(s, vbLf, "\n")
    JsonEscape = s
End Function
